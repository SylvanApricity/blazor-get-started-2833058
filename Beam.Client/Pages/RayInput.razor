@inject IDataService data
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
<p>
    <Card Title="Cast a New Ray:">
        <EditForm OnValidSubmit="CastRay" Model="@newRay" OnInvalidSubmit="FocusInputArea">
            <DataAnnotationsValidator />
        <div class="input-group" @ref="RayInputGroup">
            <InputTextArea @bind-Value="newRay.Text" class="form-control" @oninput="NewRayTextUpdated" />
            <div class="input-group-append">
                <button @onclick="ClearText" type="button" class="btn btn-outline-secondary">
                    <span class="oi oi-circle-x"></span></button>
                <button type="submit" class="btn btn-outline-secondary">
                    <span class="oi oi-audio"></span></button>
            </div>
        </div>
         <ValidationMessage For="@(() => newRay.Text)" />
        </EditForm>
    </Card>
</p>

@code{
    [Parameter]
    public RayToCast newRay { get; set; } = new RayToCast();
    [Parameter]
    public EventCallback<RayToCast> newRayChanged {get;set;}
    [Parameter]
    public EventCallback<string> RayCast { get; set; }
    ElementReference RayInputGroup { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FocusInputArea();
    }

    protected override async Task OnParametersSetAsync()
    {
        var storedRayText = await localStorage.GetItemAsync<string>(nameof(newRay));
        if (!string.IsNullOrWhiteSpace(storedRayText))
        {
            newRay.Text = storedRayText;
        }
    }

    async Task CastRay()
    {
        await RayCast.InvokeAsync(newRay.Text);
        await data.CreateRay(newRay.Text);
        await ClearText();
    }

    async Task ClearText()
    {
        await localStorage.SetItemAsync(nameof(newRay), "");
        newRay.Text = "";
    }

    async Task NewRayTextUpdated(ChangeEventArgs args)
    {
        await localStorage.SetItemAsync(nameof(newRay), args.Value);
    }

    async Task FocusInputArea()
    {
        await jsRuntime.InvokeVoidAsync("UIHelpers.focusFirstChild", RayInputGroup);
    }
}